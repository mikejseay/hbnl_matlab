function opt = coh_createopt
% coh_createopt - GUI for creation of options structure for batch analysis
% of EEG data files in the HBNL lab at SUNY Downstate Medical Center.
%  
% GUI Usage;
%  >> opt = coh_createopt;
%
%Notes:
%
%  Record of revisions:
%   Date           Programmers              Description of change
%   ====        =================   =======================================
%  10/29/15         Mike Seay        initial version
%  1 /4 /16         Mike Seay        added features and deployed first
%                                     public version
%  4 /4 /16         Mike Seay        making things more concise, usable,
%                                     and responsive to inputs

%  GUI
if nargin < 2
    
    % popup window parameters
    % -----------------------

commandload = [ '[filename, filepath] = uigetfile(''*'', ''Select a file'');' ...
                    'if filename(1) ~=0,' ...
                    '   set(findobj(''parent'', gcbf, ''tag'', tagtest), ''string'', [ filepath filename ]);' ...
                    'end;' ...
                    'clear filename filepath tagtest;' ];

dirload = [ '[dirpath] = uigetdir([],''Select a folder.'');' ...
                    'if dirpath(1) ~=0,' ...
                    '   set(findobj(''parent'', gcbf, ''tag'', tagtest), ''string'', [dirpath]);' ...
                    'end;' ...
                    'clear dirpath tagtest;' ];

geometry    = { [2 1 1.5] [2 1 1.5] [1] ... %files / lists
                [2 1 1.5] ... %experiment specific stuff
                [2 1 1.5] [3.33 1.66 1 1.5] [2 1 1.5] [2 1 1.5] ... %recording dims
                [3.33 1.66 1 1.5] [2 1 1.5] [3.33 1.66 1 1.5] [2 1 1.5] [2 1 1.5] ... %pipeline details 1
                [2 1 1.5] [3.33 1.66 1 1.5] [2 1 1.5] ... %pipeline details 2
                [2 1 1.5] [2 1 1.5] [2 1 1.5] ... %pipeline details 3
                [2 1 1.5] [3.33 1.66 1 1.5] [2 1 1.5] ... % tf specs 1
                [2 1 1.5] [2 1 1.5] [2 1 1 1 1]... %tf specs 2
                [1] [2 1 1.5] [2 1 1.5] [2 1 1.5] [2 1 1.5]}; %outputs
                
uilist = {    { 'Style', 'text', 'string', 'Text file containing list of full data file path(s)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/', 'horizontalalignment', 'left', 'tag',  'Pathfile' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''Pathfile'';' commandload ] }, ...
              ...
              { 'Style', 'text', 'string', 'Channel locations file', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/active_projects/matlab_common/61chans_ns.mat', 'horizontalalignment', 'left', 'tag',  'Mapfile' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''Mapfile'';' commandload ] }, ...
              ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              ... %
              ...
              { 'Style', 'text', 'string', 'Indices (not Type Codes) for Trials of Interest, or ''all''', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', 'all'  }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              ... %
              ...
              { 'Style', 'text', 'string', ''  }, ...
              { 'Style', 'text', 'string', ''  }, ...
              { 'Style', 'text', 'string', 'Check->Include / Uncheck->Exclude', 'fontweight', 'bold'  }, ...
              ...
              { 'Style', 'text', 'string', 'Channels to exclude or include:' }, ...
              { 'Style', 'edit', 'string', '[32 63 64]', 'tag', 'chans' }, ...
              {}, ...
              { 'Style', 'checkbox', 'string', '' , 'horizontalalignment', 'center'}, ...
              ...
              { 'Style', 'text', 'string', 'Sampling rate:', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '256' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Epoch limits ([start end] in ms):', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '[-500 1000]' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              ... %
              ...
              { 'Style', 'text', 'string', 'Clean with clean_artifacts()?' }, ...
              { 'Style', 'checkbox', 'Value', 1, 'string', '', 'horizontalalignment', 'right'}, ...
              {}, ...
              {}, ...
              ...
              { 'Style', 'text', 'string', 'High-pass filter cut-off frequency (in Hz, 0.1 or 0.5 recommended)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '0.5' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Remove EOG?' }, ...
              { 'Style', 'checkbox', 'Value', 0, 'string', '', 'horizontalalignment', 'right'}, ...
              {}, ...
              {}, ...
              ...
              { 'Style', 'text', 'string', 'EOG removal technique (lms, crls, hinf, or bss)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', 'lms' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'EOG channels', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '[32 64]' }, ...
              { 'Style', 'text', 'string', ''  }, ... %pd1
              ...
              { 'Style', 'text', 'string', 'Reference type (''none'' or ''average'')', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', 'none' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'CSD-transform? (available for default 61 channels)' }, ...
              { 'Style', 'checkbox', 'Value', 0, 'string', '', 'horizontalalignment', 'right'}, ...
              {}, ...
              {}, ...
              ...
              { 'Style', 'text', 'string', 'If CSD, specify .mat file with montage-matched CSD G and H matrices', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/active_projects/matlab_common/61chans_CSD_GH.mat', 'horizontalalignment', 'left', 'tag',  'CSDFile' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''CSDFile'';' commandload ] }, ... %pd2
              ...
              ... %
              ...
              { 'Style', 'text', 'string', 'Epoch rejection time window limits [start end], in ms:', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '[-500 700]' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Epoch rejection method (eeglab, simple, or both):', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', 'both' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Epoch rejection threshold (~150 for uV or ~6 for uV/cm^2):', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '150' }, ...
              { 'Style', 'text', 'string', ''  }, ... %pd3
              ...
              ... %
              ...
              { 'Style', 'text', 'string', 'Frequency limits for time-frequency calculation [lower upper] (in Hz)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '[2 32]' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Variable number of cycles? (checked = linearly increasing, unchecked = constant)' }, ...
              { 'Style', 'checkbox', 'Value', 0, 'string', '', 'horizontalalignment', 'right'}, ...
              {}, ...
              {}, ...
              ...
              { 'Style', 'text', 'string', 'Bins per octave (must be even number, 4 or 8 recommended)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '8' }, ...
              { 'Style', 'text', 'string', ''  }, ... %tf specs 1
              ...
              { 'Style', 'text', 'string', 'Ratio for downsampling time dimension of TF calculations (2 or 4 recommended)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '2' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Channel cross-coherence type (none, determine, seed, region, or custom)' }, ...
              { 'Style', 'edit', 'string', 'none' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Measures to include in output .mats' }, ...
              { 'Style', 'checkbox', 'Value', 0 'string', 'Good Trial Series', 'horizontalalignment', 'right'}, ...
              { 'Style', 'checkbox', 'Value', 1 'string', 'ERO (total power)', 'horizontalalignment', 'right'}, ...
              { 'Style', 'checkbox', 'Value', 1 'string', 'ITC', 'horizontalalignment', 'right'}, ...
              { 'Style', 'checkbox', 'Value', 0 'string', 'Coherence', 'horizontalalignment', 'right'}, ... %tf specs 2
              ...
              ... %
              ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Suffix for new .mat files', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '_' }, ...
              { 'Style', 'text', 'string', '' }, ...
              ...
              { 'Style', 'text', 'string', '.mat file type (-v6 loads faster in MATLAB, -v7.3 is hdf5-compatible)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '-v7.3' }, ...
              { 'Style', 'text', 'string', '' }, ...
              ...
              { 'Style', 'text', 'string', 'Folder to place output .mats:', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/active_projects/mike/', 'horizontalalignment', 'left', 'tag',  'Outpath' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''Outpath'';' dirload ] } ...
              ...
              { 'Style', 'text', 'string', 'Folder to place options file, batch scripts, and logs:', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/export/home/mike/matlab/batch/', 'horizontalalignment', 'left', 'tag',  'Optpath' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''Optpath'';' dirload ] }}; % outputs
          
results = inputgui(geometry, uilist, 'help coh_createopt;', 'Set Up Option for Data Processing - coh_createopt')';

% Verify inputs
if any(cellfun(@isempty, results([1 end-2:end]) ))
    error('A key input was omitted.');
end

% Define variables from GUI
infile_list         = results{1};

% open first file to do tests
filecell            = list2cell(infile_list);
[~,~,ext]           = fileparts(filecell{1});
[~,list_filename,~] = fileparts(results{1});
coords_file         = results{2};
trial_init_type     = 0;


if strcmpi(ext, '.cnt')  %resting
    case_vec = [];
    case_label = {};
    has_noevents = true;
else                    %h1, has events
    test_h1 = read_hdf1_dataV7(filecell{1});
    if strcmpi(results{3}, 'all')
        case_vec        = 1:length(test_h1.case_struct.descriptor);
    elseif isnumeric(eval(results{3}))
        case_vec        = eval(results{3});
    end
    case_label          = test_h1.case_struct.descriptor(case_vec);
    has_noevents = false;
end

%chan_vec
if logical(results{5})
    chan_vec = eval(results{4});
else
    chan_vec = setdiff(1:64,eval(results{4}));
end
n_chans = length(chan_vec);

rate                = eval(results{6});
epoch_lims          = eval(results{7});
cleanset            = logical(results{8});

if cleanset
    save_clean  = true;
    cleandir    = '/processed_data/matlab_common'; % hard-coded for now
else
    save_clean  = false;
    cleandir    = [];
end

%set the hp filter transition bands as half and 1.5 times the cut-off
hpfilt_cutoff       = eval(results{9});
hpfilt_bands        = [.5*hpfilt_cutoff 1.5*hpfilt_cutoff];

%eog

if logical(results{10})
    eog_rem = results{11};
    eog_chans = eval(results{12});
else
    eog_rem = [];
    eog_chans = [];
end

%reference
reref                = results{13};

%CSD
if logical(results{14})
    
    %load the CSD for 61 channels
    if chan_vec == [1:31 33:62];
        load(results{15});
    else
        error('Must use 61 channels')
    end
    
else
    
    csd_G = [];
    csd_H = [];
    
end


artf_ms_vec         = eval(results{16});
epochrej_method     = results{17};
thresh              = eval(results{18});

freq_lims           = eval(results{19});
var_cycles          = logical(results{20});
padratio            = round(eval(results{21})/2);
n_samps             = round(range(epoch_lims)*rate/1000);


[wavelet_scales, cycles] = findCWTscales(n_samps, rate, freq_lims, padratio);
if var_cycles
    wavelet_cycles = logspace(log10(cycles(2)),log10(cycles(1)),length(wavelet_scales));
else
    wavelet_cycles = [];
end
tf_timedownsamp_ratio = eval(results{22});

%coherence pairs
if strcmpi(results{23},'none')
    coherence_pairs = [];
    pair_inds = [];
    pair_indlbls = [];
else
    [coherence_pairs, pair_inds, pair_indlbls]= ...
        coh_choosepairs(results{23}, coords_file);
end

measure_names   = {'erptrial', 'wave_totpow', 'wave_evknorm', 'coh'};
measures        = measure_names( find( [results{24:27}] ) );

outsuffix = results{28};
mat_version = results{29};

outpath = results{30};
if ~exist(outpath, 'dir') %make if DNE yet
    mkdir(outpath);
    fprintf('Creating output directory at %s\n', outpath);
end
batchpath = results{31};
if ~exist(batchpath, 'dir')
    mkdir(batchpath);
    fprintf('Creating directory for options, batch, and log files at %s\n', batchpath);
end

%determine the full path where the opt will be saved
optfilename = [list_filename, outsuffix, '_opt.mat'];
optpath     = fullfile(batchpath, optfilename);

%create batch scripts with 100 files per process, or 4 divided equally

%fix the name of the batch_id so that it does not contain illegal chars
batch_id = [list_filename, outsuffix];
if ~isvarname(batch_id)
    batch_id = matlab.lang.makeValidName(batch_id);
end

batchscripts = coh_makebatches(batch_id, infile_list, batchpath, optpath, ...
    has_noevents, mat_version);
n_batches = length(batchscripts);

logpath = cell(n_batches,1);
for batch = 1:n_batches
    logfilename = [list_filename, outsuffix, '_b', num2str(batch), '.log'];
    logpath{batch} = fullfile(batchpath, logfilename);
end

%hard-coded for now
expstruct   = build_expstruct;
getbehav    = false;
n_cohperms  = 0;
rng_seed    = 10;
vis         = false;
vis_path    = '/active_projects/mike/vis';
coherence_type = 'pure';
thresh_bl = [-100 0];
burst = 'off';

if strcmpi(epochrej_method, 'both')
    simple_thresh = thresh;
    eeglab_thresh = simple_thresh*2/3;
end

if ~isempty(csd_G) && ~isempty(csd_H)
    simple_thresh = simple_thresh / 25;
    eeglab_thresh = eeglab_thresh / 25;
end

opt=v2struct(infile_list, coords_file, trial_init_type, case_vec, ...
    case_label, chan_vec, has_noevents, n_chans, rate, epoch_lims, ...
    artf_ms_vec, epochrej_method, thresh, cleanset, hpfilt_bands, ...
    csd_G, csd_H, freq_lims, padratio, n_samps, ...
    wavelet_scales, var_cycles, wavelet_cycles, tf_timedownsamp_ratio, ...
    coherence_pairs, pair_inds, pair_indlbls, ...
    measures, outsuffix, outpath, batchpath, optpath, ...
    batch_id, batchscripts, logpath, burst, ...
    save_clean, cleandir, expstruct, getbehav, ...
    n_cohperms, reref, rng_seed, vis, vis_path, coherence_type, ...
    eog_rem, eog_chans, simple_thresh, eeglab_thresh, thresh_bl, ...
    mat_version);

if exist(optpath, 'file')
    overwrite=input('Options file being overwritten. Continue? (y/n) ', 's');
    if strcmpi(overwrite, 'y')
        save(optpath, 'opt');
    else
        fprintf('Exiting...\n');
        return 
    end
else
    save(optpath, 'opt', '-v7.3');
end

% make super batches
if n_batches < 4
    coh_makesuperbatches(opt, n_batches, 2014, 'matlab');
else
    coh_makesuperbatches(opt, 4, 2014, 'matlab');
end

disp('Done.');

end