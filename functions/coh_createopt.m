function opt=coh_createopt
% coh_createopt - GUI for creation of options structure for batch analysis
% of EEG data files in the HBNL lab at SUNY Downstate Medical Center.
%  
%GUI Usage;
%  >> opt=coh_createopt;
%
%Notes:
%
%  Record of revisions:
%   Date           Programmers               Description of change
%   ====        =================            =====================
%  10/29/15         Mike Seay                  initial version

%  GUI
if nargin < 2
    
    % popup window parameters
    % -----------------------

commandload = [ '[filename, filepath] = uigetfile(''*'', ''Select a file'');' ...
                    'if filename(1) ~=0,' ...
                    '   set(findobj(''parent'', gcbf, ''tag'', tagtest), ''string'', [ filepath filename ]);' ...
                    'end;' ...
                    'clear filename filepath tagtest;' ];

dirload = [ '[dirpath] = uigetdir([],''Select a folder.'');' ...
                    'if dirpath(1) ~=0,' ...
                    '   set(findobj(''parent'', gcbf, ''tag'', tagtest), ''string'', [dirpath]);' ...
                    'end;' ...
                    'clear dirpath tagtest;' ];

geometry    = { [2 1 1.5] [2 1 1.5] [2 1 1.5] [1] ... %files / lists
                [2 1 1.5] [2 1 1.5] [2 1 1.5] ... %experiment specific stuff
                [2 1 1.5] [3.33 1.66 1 1.5] [2 1 1.5] [2 1 1.5] [3.33 1.66 1 1.5] ... %recording dims
                [2 1 1.5] [2 1 1.5] [2 1 1.5] ... %pipeline details 1
                [3.33 1.66 1 1.5] [2 1 1.5] [3.33 1.66 1 1.5] [2 1 1.5] ... %pipeline details 2
                [2 1 1.5] [2 1 1.5] [2 1 1.5] [2 1 1.5] [2 1 1 1 1 1]... %tf specs
                [1] [2 1 1.5] [2 1 1.5] [2 1 1.5]}; %outputs
                
uilist = {    { 'Style', 'text', 'string', 'Text file containing list of full data file path(s)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/active_projects/mike/fmri_phase4_err/fmri_err_cnth1s', 'horizontalalignment', 'left', 'tag',  'Neuroscanfile' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''Datafilepath'';' commandload ] }, ...
              ...
              { 'Style', 'text', 'string', 'Data file type', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', 'hdf_binary'  }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Channel locations file', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/export/home/mike/matlab/origin/coords/61chans_ns.mat', 'horizontalalignment', 'left', 'tag',  'Mapfile' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''Mapfile'';' commandload ] }, ...
              ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              ... %
              ...
              { 'Style', 'text', 'string', 'Type Code of Trial-Initiating Event', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '90'  }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Indices (not Type Codes) for Trials of Interest', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '[1 2]'  }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Labels for Trials of Interest (matched to above)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '{''gain'' ''loss''}'  }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              ... %
              ...
              { 'Style', 'text', 'string', ''  }, ...
              { 'Style', 'text', 'string', ''  }, ...
              { 'Style', 'text', 'string', 'Check->Include / Uncheck->Exclude', 'fontweight', 'bold'  }, ...
              ...
              { 'Style', 'text', 'string', 'Channels to exclude or include:' }, ...
              { 'Style', 'edit', 'string', '[32 63 64]', 'tag', 'chans' }, ...
              {}, ...
              { 'Style', 'checkbox', 'string', '' , 'horizontalalignment', 'center'}, ...
              ...
              { 'Style', 'text', 'string', 'Sampling rate:', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '256' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Epoch limits ([start end] in ms):', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '[-500 1000]' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Lengthen epoch by pre-stimulus duration?' }, ...
              { 'Style', 'checkbox', 'string', '', 'horizontalalignment', 'right'}, ...
              {}, ...
              {}, ...
              ...
              { 'Style', 'text', 'string', 'Epoch rejection time window limits [start end], in ms:', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '[-500 700]' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Epoch rejection method (eeglab or simple):', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', 'eeglab' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Epoch rejection threshold (~150 for uV or ~6 for uV/cm^2):', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '6' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Clean with clean_artifacts()?' }, ...
              { 'Style', 'checkbox', 'Value', 1, 'string', '', 'horizontalalignment', 'right'}, ...
              {}, ...
              {}, ...
              ...
              { 'Style', 'text', 'string', 'High-pass filter cut-off frequency (in Hz, 0.1 or 0.5 recommended)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '0.5' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'CSD-transform? (available for default 61 channels)' }, ...
              { 'Style', 'checkbox', 'Value', 1, 'string', '', 'horizontalalignment', 'right'}, ...
              {}, ...
              {}, ...
              ...
              ... %
              ...
              { 'Style', 'text', 'string', 'If CSD, specify .mat file with montage-matched CSD G and H matrices', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/export/home/mike/matlab/origin/coords/61chans_CSD_GH.mat', 'horizontalalignment', 'left', 'tag',  'Neuroscanfile' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''CSDFile'';' commandload ] }, ...
              ...
              ... %
              ...
              { 'Style', 'text', 'string', 'Frequency limits for time-frequency calculation [lower upper] (in Hz)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '[2 32]' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Bins per octave (must be even number, 4 or 8 recommended)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '8' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Ratio for downsampling time dimension of TF calculations (2 or 4 recommended)', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '2' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Channel cross-coherence type (none, determine, seed, region, or custom)' }, ...
              { 'Style', 'edit', 'string', 'custom' }, ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Measures to include in output .mats' }, ...
              { 'Style', 'checkbox', 'Value', 1 'string', 'Single-trial', 'horizontalalignment', 'right'}, ...
              { 'Style', 'checkbox', 'Value', 1 'string', 'ERO (evoked)', 'horizontalalignment', 'right'}, ...
              { 'Style', 'checkbox', 'Value', 1 'string', 'ERO (normed evoked)', 'horizontalalignment', 'right'}, ...
              { 'Style', 'checkbox', 'Value', 1 'string', 'ERO (total)', 'horizontalalignment', 'right'}, ...
              { 'Style', 'checkbox', 'Value', 1 'string', 'Coherence', 'horizontalalignment', 'right'}, ...
              ...
              ... %
              ...
              { 'Style', 'text', 'string', ''  }, ...
              ...
              { 'Style', 'text', 'string', 'Suffix for new .mat files', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '_FPO92' }, ...
              { 'Style', 'text', 'string', '' }, ...
              ...
              { 'Style', 'text', 'string', 'Folder to place output .mats:', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/active_projects/mike/fmri_err_FPO92', 'horizontalalignment', 'left', 'tag',  'Newdirpath' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''Outpath'';' dirload ] } ...
              ...
              { 'Style', 'text', 'string', 'Folder to place options file, batch scripts, and logs:', 'horizontalalignment', 'right' }, ...
              { 'Style', 'edit', 'string', '/export/home/mike/matlab/batch/err_FPO92', 'horizontalalignment', 'left', 'tag',  'Newdirpath' }, ...
              { 'Style', 'pushbutton', 'string', 'Browse', 'callback', [ 'tagtest = ''Optpath'';' dirload ] }};
          
results = inputgui(geometry, uilist, 'help coh_createopt;', 'Set Up Option for Data Processing - coh_createopt');

if true

% Verify inputs
if any(cellfun(@isempty,{results{[1 2 3 5 9 20 21 22]}}))
    error('A key input was omitted.');
end

% Define variables from GUI
infile_list=results{1};
[~,list_filename,~]=fileparts(results{1});

data_type=results{2};
coords_file=results{3};
trial_init_type=eval(results{4});
case_vec=eval(results{5});
case_label=eval(results{6});

%chan_vec
if logical(results{8})
    chan_vec=eval(results{7});
else
    chan_vec=setdiff(1:64,eval(results{7}));
end
n_chans=length(chan_vec);

rate=eval(results{9});
epoch_lims=eval(results{10});
prestim_ms=-epoch_lims(1);
lengthen=logical(results{11});
artf_ms_vec=eval(results{12});
epochrej_method=results{13};
thresh=eval(results{14});
cleanset=logical(results{15});

%set the hp filter transition bands as half and double the cut-off
hpfilt_cutoff=eval(results{16});
hpfilt_bands=[.5*hpfilt_cutoff 2*hpfilt_cutoff];

%CSD
if logical(results{17})
    
    %load the CSD for 61 channels
    if chan_vec==[1:31 33:62];
        load(results{18});
    else
        error('Must use 61 channels')
    end
    
end

freq_lims=eval(results{19});
padratio=round(eval(results{20})/2);
n_samps=round(range(epoch_lims)*rate/1000);
wavelet_scales=findCWTscales(n_samps,rate,freq_lims,padratio);
tf_timedownsamp_ratio=eval(results{21});

%coherence pairs
if strcmpi(results{22},'none')
    coherence_pairs=[];
else
    [coherence_pairs, pair_inds, pair_indlbls]= ...
        coh_choosepairs(results{22},coords_file);
end

measure_names={'erptrial','wave_evk','wave_evknorm','wave_tot','coh'};
measures={  measure_names{  find( [results{23:27}] )  }  };

outsuffix=results{28};
outpath=results{29};
batchpath=results{30};

%determine the full path where the opt will be saved
optfilename=[list_filename,outsuffix,'_opt.mat'];
optpath=fullfile(batchpath,optfilename);

%create batch scripts with 100 files per process
batch_id=[list_filename,outsuffix];
batchscripts=coh_makebatches(batch_id,infile_list,batchpath,optpath,100);
n_batches=length(batchscripts);

logpath=cell(n_batches,1);
for batch=1:n_batches
    logfilename=[list_filename,outsuffix,'_b',num2str(batch),'.log'];
    logpath{batch}=fullfile(results{30},logfilename);
end

%hard-coded for now
save_clean=true;
cleandir='/active_projects/mike/clean';
getbehav=false;
n_cohperms=0;
reref='off';
rng_seed=10;
vis=false;
vis_path='/active_projects/mike/vis';

opt=v2struct(infile_list,data_type,coords_file,trial_init_type, case_vec, ...
    case_label, chan_vec, n_chans, rate, epoch_lims, prestim_ms, ...
    lengthen, artf_ms_vec, epochrej_method, thresh, cleanset, hpfilt_bands, ...
    csd_G, csd_H, freq_lims, n_samps, wavelet_scales, tf_timedownsamp_ratio, ...
    coherence_pairs, pair_inds, pair_indlbls, ...
    measures, outsuffix, outpath, batchpath, optpath, ...
    batch_id, batchscripts, logpath, save_clean, cleandir, getbehav, ...
    n_cohperms, reref, rng_seed, vis, vis_path);

end

if exist(optpath,'file')
    overwrite=input('Options file being overwritten. Continue? (y/n) ','s');
    if strcmpi(overwrite,'y')
        save(optpath,'opt');
    else
        fprintf('Exiting...\n');
        return 
    end
else
    save(optpath,'opt');
end

disp('Done.');

end