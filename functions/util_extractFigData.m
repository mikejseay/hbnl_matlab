% util_extractFigData - extract data contained within a Matlab figure (for
% example, when generated by a toolbox in which the variables that are
% being plotted are not available in the global workspace). The user must
% first make the desired figure the active window (click into it) then run
% this script. The script will attempt to find all the appreciable arrays
% in the figure and plot each separately in an square array of plots.

% This script was initially developed to extract data from BCI2000 figures
% generated by 'OfflineAnalysis.bat' but may be generally useful.

% See also bci2000_plotErps as an extension to this script.

% NOTE : Different objects like 'Line' and 'Surface' will store data
% differently.
% Based on the 'Type', you can search the documentation for how each
% type stores its data.

% Author: Michael Seay, GCNL, 2014

%%

%Get a handle to the current figure:
h = gcf;

%The data that is plotted is usually a 'child' of the Axes object.
%The axes objects are themselves children of the figure.
%You can go down their hierarchy as follows:

%Get the axes
axesObjs = get(h, 'Children');

%Get the objects in axes
dataObjs = get(axesObjs, 'Children');

%%

%Extract values from the dataObjs
for child=1:length(dataObjs)
    
    %Check their type:
    objTypes{child} = get(dataObjs{child}, 'Type');
    
    %If there are multiple lines in subplots etc., check for that
    if iscell(objTypes{child})
        
        %For each sub-element
        for subchild=1:length(dataObjs{child})
            
            %If it's a line (data)
            if strcmpi(objTypes{child}{subchild},'line')
                
                %Get the data
                xdata{child,subchild} = get(dataObjs{child}(subchild), ...
                    'XData');  %data from low-level grahics objects
                ydata{child,subchild} = get(dataObjs{child}(subchild), ...
                    'YData');
                %zdata{child,subchild} = get(dataObjs{child}(subchild), ...
                %'ZData'); %zdata is left commented out until necessary
            end
        end
        
    %If there is just one element in the current subplot etc.    
    else
        
        %If it's a line (data)
        if strcmpi(objTypes{child},'line')
            
            %Get the data
            xdata{child} = get(dataObjs{child}, 'XData');  %data from ...
            %low-level grahics objects
            ydata{child} = get(dataObjs{child}, 'YData');
            %zdata{child} = get(dataObjs{child}, 'ZData'); %zdata is left ...
            %commented out until necessary
        end
    end
end

%% Check to see if datamat already exists, and if so, delete it

if exist('datamat','var')
    clear datamat
end
%Go through the ydata variable (data values) and find only the long
%matrices and store them in a regular numerical matrix.
i=0;
for row=1:size(ydata,1)
    for column=1:size(ydata,2)
        if length(ydata{row,column})>2
            i=i+1;
            datamat(i,:)=ydata{row,column};
        end
    end
end

%%

%For each appreciable set of numbers, plot it with its index to figure out
%what it is.

%Determine the smallest perfect square that fits all of them
sidelength=ceil(sqrt(size(datamat,1)));

%Plot each one
figure
for set=1:size(datamat,1)
    subplot(sidelength,sidelength,set)
    plot(datamat(set,:))
    title(num2str(set))
end

clear child column h i row set sidelength subchild objTypes xdata ydata